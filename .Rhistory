list.files("E:/RaMBat")
setwd("E:/RaMBat")
getwd()
samp_13 <- readRDS("E:/Downloads/samp_14.rds")
all_13datasets <- readRDS("E:/Downloads/all_14datasets.rds")
sampAnnot_GSE85217 <- readRDS("E:/Downloads/sampAnnot_GSE85217.rds")
GSE85217 <- readRDS("E:/Downloads/GSE85217.rds")
usethis::use_data(all_13datasets, overwrite = TRUE, compress = "xz")
getwd()
usethis::proj_sitrep()  # 查看项目设置状况
dir()  # 查看当前目录下的文件和文件夹
exists("all_13datasets")
# 检查 data 目录是否有写入权限
dir.exists("data")
file.access("data", mode = 2)  # 如果返回0表示有写入权限
save(all_13datasets, file = "data/all_13datasets.rda", compress = "xz")
usethis::use_data(all_13datasets, overwrite = TRUE, compress = "xz")
file.exists("data/all_13datasets.rda")
usethis::use_data(GSE85217, overwrite = TRUE, compress = "xz")
usethis::use_data(samp_13, overwrite = TRUE, compress = "xz")
file.exists("data/GSE85217.rda")
usethis::use_data(sampAnnot_GSE85217, overwrite = TRUE, compress = "xz")
MB_RANK_GP <- readRDS("E:/Downloads/MB_RANK_GP.rds")
all_rank_t_genes <- readRDS("E:/Downloads/rstudio-export (1)/all_rank_t_genes.rds")
all_reversed_gp_genes <- readRDS("E:/Downloads/rstudio-export (1)/all_reversed_gp_genes.rds")
usethis::use_data(MB_RANK_GP, overwrite = TRUE, compress = "xz")
usethis::use_data(all_rank_t_genes, overwrite = TRUE, compress = "xz")
usethis::use_data(all_reversed_gp_genes, overwrite = TRUE, compress = "xz")
View(all_13datasets)
View(samp_13)
View(sampAnnot_GSE85217)
View(all_rank_t_genes)
View(all_rank_t_genes)
View(all_reversed_gp_genes)
View(MB_RANK_GP)
#' this function is used to subtype given samples. Based on gene ratios we selected from previous steps, for each sample, we predict its subtype
#'
#' @param data the original dataset we extract features
#' @param MB_RANK_GP MB_RANK_GP is the subtype-specific gene ratios selected from LaSelect() function
#' @param sampAnnote sampAnnot is the annotation file for each samples in data
#'
#' @return a global object pred_result
#' @export
#'
#' @examples myMat<-preMB(data)
predMB<-function(data){
medulloGeneSetsUp <- MB_RANK_GP #MB_RANK_GP#GB_RANK_GP_reversalratio#medulloSetsUp#MB_RANK_GP#MB_RANK_GP_reversalratio_alpha0.06
signatureProbes <-c(medulloGeneSetsUp$WNT,medulloGeneSetsUp$SHH,
medulloGeneSetsUp$Group3,medulloGeneSetsUp$Group4)
getGenes <- function(x) {
out <- strsplit(x, split="_")
output <- c(out[[1]])
}
signatureGenes <- unique(as.character(sapply(signatureProbes, FUN=getGenes)))
#Filter Matrix
exprs<-data
exprs_SG <- exprs[intersect(rownames(exprs), signatureGenes),,drop = F]
#Create Ratios
createRatio <- function(x) {
g1 <- x[1]
g2 <- x[2]
g1g2_ratio <- 2^(exprs[g1,,drop = F]-exprs[g2,,drop = F])
return(g1g2_ratio)
}
if(ncol(exprs_SG) > 1){
corGenes <- stats::cor(t(exprs_SG))
corGenes <- data.frame(reshape2::melt(corGenes))
corGenes <- corGenes[corGenes[,"value"]<.99,]
print(dim(corGenes))
} else {
corGenes <- expand.grid(rownames(exprs_SG), rownames(exprs_SG))
corGenes <- corGenes[which(corGenes$Var1 != corGenes$Var2),]
}
#exprs <- as.matrix(gse21140)
exprs <- as.matrix(exprs)
geneRatioOut <- apply(corGenes, MARGIN = 1, FUN = createRatio)
if(ncol(exprs) == 1){
geneRatioOut <- as.data.frame(geneRatioOut)
} else {
geneRatioOut <- data.frame(t(geneRatioOut))
}
# assign rownames and column names
rownames(geneRatioOut) <- paste(corGenes[,1], corGenes[,2], sep="_")
colnames(geneRatioOut) <- colnames(exprs)
geneRatioOut <- geneRatioOut[!is.infinite(rowSums(geneRatioOut)),,drop = F] # added
################################
#Filter to signature ratios
#Create Heatmap
################################
geneRatioOut <- geneRatioOut[intersect(rownames(geneRatioOut), signatureProbes),,drop = F]
medulloGeneSetsUp$WNT <- intersect(medulloGeneSetsUp$WNT, rownames(geneRatioOut))
medulloGeneSetsUp$SHH <- intersect(medulloGeneSetsUp$SHH, rownames(geneRatioOut))
medulloGeneSetsUp$Group3 <- intersect(medulloGeneSetsUp$Group3, rownames(geneRatioOut))
medulloGeneSetsUp$Group4 <- intersect(medulloGeneSetsUp$Group4, rownames(geneRatioOut))
calcScore <- function(myMat, mySetsUp) {
getScoreSet <- function(x, myMat = myMat) {
return(colMeans(myMat[rownames(myMat) %in% x,,drop = F]))
}
myMatUp <- data.frame(lapply(mySetsUp, FUN = getScoreSet, myMat))
myMatUp$Pred_Subtype <- apply(myMatUp, 1, function(row) {
colnames(myMatUp)[which.max(row)]
})
return( myMatUp)
}
myMat <- calcScore(myMat = geneRatioOut, mySetsUp = medulloGeneSetsUp)
return(myMat)
}
result<-predMB(all_13datasets)
devtools::document()
rm(list = c("predMB"))
devtools::load_all()
.rs.restartR()  # 在 RStudio 中
devtools::document()
devtools::document()
devtools::install()
getwd()
setwd('E:/RaMBat/')
getwd()
devtools::load_all(".")
devtools::check()
# 重命名非标准文件名
file.rename("建立data加载数据.R", "setup_data.R")
usethis::use_package("reshape2")
usethis::use_package("glmnet")
usethis::use_package("purrr")
# 选择一个许可证
usethis::use_mit_license()  # 或 use_gpl3_license()
LazyDataCompression: xz
readLines("E:/RaMBat/NAMESPACE")
list.files("E:/RaMBat/man", pattern = "RCA", full.names = TRUE)
list.files("E:/RaMBat/R", pattern = "RCA", full.names = TRUE)
unlink("E:/RaMBat/R/RCA.R")
devtools::document()
list.files("E:/RaMBat")
devtools::install("E:/RaMBat")
library(RaMBat)
#' @param MB_RANK_GP final features selected from example dataset
#' @param sampAnnote Description of sampAnnote
#' @param data the example data (all_13datasets) to test the performance of RaMBat
#' @param MB_RANK_GP MB_RANK_GP is the subtype-specific gene ratios selected from LaSelect() function
#' @param sampAnnote sampAnnot is the annotation file for each samples in data
#'
#' @return a global object pred_result
#' @export
#'
#' @examples pred_result<-testMB(all_datasets, MB_RANK_GP, sampAnnote_all)
testMB<-function(data){
medulloGeneSetsUp <- MB_RANK_GP #MB_RANK_GP#GB_RANK_GP_reversalratio#medulloSetsUp#MB_RANK_GP#MB_RANK_GP_reversalratio_alpha0.06
signatureProbes <-c(medulloGeneSetsUp$WNT,medulloGeneSetsUp$SHH,
medulloGeneSetsUp$Group3,medulloGeneSetsUp$Group4)
getGenes <- function(x) {
out <- strsplit(x, split="_")
output <- c(out[[1]])
}
signatureGenes <- unique(as.character(sapply(signatureProbes, FUN=getGenes)))
#Filter Matrix
exprs<-data
exprs_SG <- exprs[intersect(rownames(exprs), signatureGenes),,drop = F]
#Create Ratios
createRatio <- function(x) {
g1 <- x[1]
g2 <- x[2]
g1g2_ratio <- 2^(exprs[g1,,drop = F]-exprs[g2,,drop = F])
return(g1g2_ratio)
}
if(ncol(exprs_SG) > 1){
corGenes <- stats::cor(t(exprs_SG))
corGenes <- data.frame(reshape2::melt(corGenes))
corGenes <- corGenes[corGenes[,"value"]<.99,]
print(dim(corGenes))
} else {
corGenes <- expand.grid(rownames(exprs_SG), rownames(exprs_SG))
corGenes <- corGenes[which(corGenes$Var1 != corGenes$Var2),]
}
#exprs <- as.matrix(gse21140)
exprs <- as.matrix(exprs)
geneRatioOut <- apply(corGenes, MARGIN = 1, FUN = createRatio)
if(ncol(exprs) == 1){
geneRatioOut <- as.data.frame(geneRatioOut)
} else {
geneRatioOut <- data.frame(t(geneRatioOut))
}
# assign rownames and column names
rownames(geneRatioOut) <- paste(corGenes[,1], corGenes[,2], sep="_")
colnames(geneRatioOut) <- colnames(exprs)
geneRatioOut <- geneRatioOut[!is.infinite(rowSums(geneRatioOut)),,drop = F] # added
################################
#Filter to signature ratios
#Create Heatmap
################################
geneRatioOut <- geneRatioOut[intersect(rownames(geneRatioOut), signatureProbes),,drop = F]
medulloGeneSetsUp$WNT <- intersect(medulloGeneSetsUp$WNT, rownames(geneRatioOut))
medulloGeneSetsUp$SHH <- intersect(medulloGeneSetsUp$SHH, rownames(geneRatioOut))
medulloGeneSetsUp$Group3 <- intersect(medulloGeneSetsUp$Group3, rownames(geneRatioOut))
medulloGeneSetsUp$Group4 <- intersect(medulloGeneSetsUp$Group4, rownames(geneRatioOut))
calcScore <- function(myMat, mySetsUp) {
getScoreSet <- function(x, myMat = myMat) {
return(colMeans(myMat[rownames(myMat) %in% x,,drop = F]))
}
myMatUp <- data.frame(lapply(mySetsUp, FUN = getScoreSet, myMat))
myMatUp$Pred_Subtype <- apply(myMatUp, 1, function(row) {
colnames(myMatUp)[which.max(row)]
})
return( myMatUp)
}
myMat <- calcScore(myMat = geneRatioOut, mySetsUp = medulloGeneSetsUp)
match<-match(samp_14$gsm,rownames(myMat))
myMat$GroundTruth<-samp_14$Subtype[match]
pred <- data.frame(cbind(myMat$Pred_Subtype,rownames(myMat)))
names(pred)<-c("best.fit", "sample")
rownames(pred)<-pred$sample
sample.order <- rownames(pred)
pred <- pred[sample.order,] # keeping the correct order
samp_14<-sampAnnote
pred<-pred[samp_14$gsm,]
best.fit<-pred[,1]
#actual<-label_5_LBL202#label_2_validation
pred<-cbind(samp_14, best.fit)
data<-pred
# Filter out rows where 'actual' is 'U'
filtered_data <- data[data$Subtype != 'U', ]
# Get unique studies
unique_studies <- unique(filtered_data$dataset)
# Initialize a vector to store accuracies
accuracies <- numeric(length(unique_studies))
# Loop through each study to calculate accuracy
for (i in seq_along(unique_studies)) {
study_name <- unique_studies[i]
study_data <- filtered_data[filtered_data$dataset == study_name, ]
accuracies[i] <- 100*mean(study_data$best.fit == study_data$Subtype)
}
# Combine the studies and their accuracies into a data frame
accuracy_per_study <- data.frame(Study = unique_studies, Accuracy = accuracies)
overal=100*mean(filtered_data$Subtype == filtered_data$best.fit)
accuracy_per_study[(nrow(accuracy_per_study)+1),]<-c('Overal', overal)
pred_result <- list(
pred_score = myMat,
pred_accuracy = accuracy_per_study
)
return(pred_result)
}
devtools::install("E:/RaMBat")
library(RaMBat)
getwd()
data("all_13datasets")
